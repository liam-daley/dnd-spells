import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { APIReference as Spell } from "../../api/dnd-api-slice";
import { fetchSpell } from "./spellAPI";

export interface SpellState {
  value: Spell;
  status: "idle" | "loading" | "failed";
}

const initialState: SpellState = {
  value: {
    index: "acid-arrow",
    name: "Acid Arrow",
    url: "/api/spells/acid-arrow",
  },
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(updateSpellAsync(selectedSpell))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const updateSpellAsync = createAsyncThunk(
  "spell/fetchSpell",
  async (spell: Spell) => {
    const response = await fetchSpell(spell);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const spellSlice = createSlice({
  name: "spell",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    updateSelectedSpell: (state, action: PayloadAction<Spell>) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updateSpellAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateSpellAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      })
      .addCase(updateSpellAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// export const { increment, decrement, incrementByAmount, amountAdded } =
//   spellSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.spell.value)`
export const selectSpell = (state: RootState) => state.spell.value;

export default spellSlice.reducer;
